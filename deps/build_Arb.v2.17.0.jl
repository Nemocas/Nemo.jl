using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libarb"], :libarb),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Arb_jll.jl/releases/download/Arb-v2.17.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Arb.v2.17.0.aarch64-linux-gnu.tar.gz", "02a0df06f55f805aa446672b83b677d9ea7be9264ed4229624e60d585128f6d3"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Arb.v2.17.0.aarch64-linux-musl.tar.gz", "858ca4629268651feacfbc8c8845a764fc1e41086e1c34b94bc4d16d5e83e312"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Arb.v2.17.0.armv7l-linux-gnueabihf.tar.gz", "51d12c56f5b913b99112cde86288c9aec464fb8407afb9e70b18bd60033a1035"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Arb.v2.17.0.armv7l-linux-musleabihf.tar.gz", "ce7bc03fb73002984f5d9ce553eb48daf6a0182075b0de959e2f356debf8eac9"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Arb.v2.17.0.i686-linux-gnu.tar.gz", "935d7a61593e4638b558030819b300028bc16582390d895970041fec0e2d61f6"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Arb.v2.17.0.i686-linux-musl.tar.gz", "0088a439a6608c554ea4ae9c6833612dfd0fb6f7ca59a3a94f249d27c333422d"),
    Windows(:i686) => ("$bin_prefix/Arb.v2.17.0.i686-w64-mingw32.tar.gz", "9bbfd60aaa1caea2d3f465bb95398ff6227efbab6d54a93421872041fe416d0b"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Arb.v2.17.0.powerpc64le-linux-gnu.tar.gz", "cc399a68cea33e02cfb93058c630307bc517e30e95e150fbb8f885132a6e9587"),
    MacOS(:x86_64) => ("$bin_prefix/Arb.v2.17.0.x86_64-apple-darwin14.tar.gz", "b6f472805e30ec15c763f042f623a648b2b6eb747a61a8779ee892233a9545f6"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Arb.v2.17.0.x86_64-linux-gnu.tar.gz", "cecf6cfbc2d4b212c385bb24a360b2e447e505fb49638b01043d3e4097d2ebc6"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Arb.v2.17.0.x86_64-linux-musl.tar.gz", "18942eed330a4d4e96ef9dfc9e392a09b3ca085b7a3d7cc87303a70d4b900ca1"),
    FreeBSD(:x86_64) => ("$bin_prefix/Arb.v2.17.0.x86_64-unknown-freebsd11.1.tar.gz", "2ebd0938d8f01f148ed11d09eb8a41db51a5685ff6f0fa8971d67813a49018ba"),
    Windows(:x86_64) => ("$bin_prefix/Arb.v2.17.0.x86_64-w64-mingw32.tar.gz", "c18e860d75aa706e842f11513d4bd5e7b722b98647005975fd107cdb634e7256"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
