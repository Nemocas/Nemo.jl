using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libarb"], :libarb),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Arb_jll.jl/releases/download/Arb-v200.1900.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Arb.v200.1900.0.aarch64-linux-gnu.tar.gz", "db933870f1ffa5728d652d808fb72a02cad2ab88d95d909118ad83c9cfcbb56a"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Arb.v200.1900.0.aarch64-linux-musl.tar.gz", "423d405311ed7c4a03a2c5edee33dbacc10ef77365c96c6d828bd14ae1c395d6"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Arb.v200.1900.0.armv7l-linux-gnueabihf.tar.gz", "855b9b2d855b091f5ffb2005802012ee06de0c1915d78c32d71ff1278ea2f001"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Arb.v200.1900.0.armv7l-linux-musleabihf.tar.gz", "3f01d429c727f59f01463706afcb4b7cda88d72498be13aec4b4ba63bd3e9046"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Arb.v200.1900.0.i686-linux-gnu.tar.gz", "bfb3852f3fe464db737b95cdc78cb0748a7f16fdb042be626275202d015e241b"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Arb.v200.1900.0.i686-linux-musl.tar.gz", "3ff045882537bbb14506a79682a0b853b53b77526e67081dacc542db0be23f58"),
    Windows(:i686) => ("$bin_prefix/Arb.v200.1900.0.i686-w64-mingw32.tar.gz", "e1d763649dcc978bcdbe86d98e774d0934a135107285ed861af3a75fbed1babc"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Arb.v200.1900.0.powerpc64le-linux-gnu.tar.gz", "d9110a3909bc858546a429206228c77f52a2599c73547ae09ec0b67b4ed20805"),
    MacOS(:x86_64) => ("$bin_prefix/Arb.v200.1900.0.x86_64-apple-darwin.tar.gz", "943444c089031a528f04579cc3a1dcdc0abf056381d2dddb1c6ec327baea36a5"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Arb.v200.1900.0.x86_64-linux-gnu.tar.gz", "e367368d0c494f3075b28955030212611efccc97be62eb522812253d88450841"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Arb.v200.1900.0.x86_64-linux-musl.tar.gz", "ffbd844d8718f91f89a37cd2acbb79fd5b60533333a0c0cd8f936ce0dcb97ee0"),
    FreeBSD(:x86_64) => ("$bin_prefix/Arb.v200.1900.0.x86_64-unknown-freebsd.tar.gz", "e4f671c620ea7c236fab9126d9fcc0aade31a3159a52659cdf75bb0e3acd7c6c"),
    Windows(:x86_64) => ("$bin_prefix/Arb.v200.1900.0.x86_64-w64-mingw32.tar.gz", "cda5f1e8d828f7ba16d452132e5fb2fb113c3ee206d98cf50db6b65de897c655"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
