using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libantic"], :libantic),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Antic_jll.jl/releases/download/Antic-v0.1.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Antic.v0.1.0.aarch64-linux-gnu.tar.gz", "26820f90f0975f608caece27b421a4b71e5b1b2be49905ac89b96abae949ca83"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Antic.v0.1.0.aarch64-linux-musl.tar.gz", "76f80631815f7873dd40c9c836731d78548fc13d62632c1f47c444e1b16c3678"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Antic.v0.1.0.armv7l-linux-gnueabihf.tar.gz", "342708aade30213ebd6fdc70ecf5a62ab19e5d846d5af8003fcbc7f7cf62d215"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Antic.v0.1.0.armv7l-linux-musleabihf.tar.gz", "fc9737ce30f774e54eab9130aa173f706b88b289d7e6f188e2f68dc9546e71f3"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Antic.v0.1.0.i686-linux-gnu.tar.gz", "a01ea545a80a8d291ac8271e494fd5b6b4f5e98782018ad8eafcc3328a2dd82c"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Antic.v0.1.0.i686-linux-musl.tar.gz", "5ae5a04317094810a00e48908ca4ec19d3ec9d694b899de817a7f56c69bec619"),
    Windows(:i686) => ("$bin_prefix/Antic.v0.1.0.i686-w64-mingw32.tar.gz", "4e330d2ebbb1759cfb297cbb83b52046309a21fa41e041d4d4c7243a015770a7"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Antic.v0.1.0.powerpc64le-linux-gnu.tar.gz", "a2306cc34b092ff63b12361088f5fd7d88105e1c1f58a0be1b4319898a90f24a"),
    MacOS(:x86_64) => ("$bin_prefix/Antic.v0.1.0.x86_64-apple-darwin14.tar.gz", "892f41a1184aa691e783ba864dc699104621a607f83dfaf6674248e914b3d2c4"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Antic.v0.1.0.x86_64-linux-gnu.tar.gz", "e2926aef3f1bb132d2fa276741ed4b11b7a3c4c02e854cb7825780ae74aaafc2"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Antic.v0.1.0.x86_64-linux-musl.tar.gz", "881249c99a30b3a0437427936b8f3987e568121c38a1df072da5d78df9a81fe7"),
    FreeBSD(:x86_64) => ("$bin_prefix/Antic.v0.1.0.x86_64-unknown-freebsd11.1.tar.gz", "894a1edce0cc1010aef9ee8e76218370d031a02e53fb026bafbe89fb74ecbd93"),
    Windows(:x86_64) => ("$bin_prefix/Antic.v0.1.0.x86_64-w64-mingw32.tar.gz", "1c45fcc3ad0b4be155a6712f11e17e951572f88d13b380c8500d228123af710d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
